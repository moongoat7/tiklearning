export default async function handler(req, res) {
  try {
    // Extract script and optional voice ID from request body
    const { script, voice = "en-US-JennyNeural" } = req.body || {};

    // Ensure we have a D-ID API key in the environment
    const apiKey = process.env.DID_API_KEY;
    if (!apiKey) {
      return res.status(500).json({ error: "Missing DID_API_KEY" });
    }

    // Create a new talk with the provided script using D‑ID's API
    const createRes = await fetch("https://api.d-id.com/talks", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        // D‑ID uses basic authentication with the API key as the username
        Authorization: `Basic ${Buffer.from(`${apiKey}:`).toString("base64")}`,
      },
      body: JSON.stringify({
        script: {
          type: "text",
          input: script,
          provider: {
            type: "microsoft",
            voice_id: voice,
          },
        },
        // Default avatar; replace this URL to customise the avatar
        source_url: "https://i.imgur.com/0Z8qZ8Z.png",
      }),
    });

    const talk = await createRes.json();
    if (!talk.id) {
      // Something went wrong creating the talk
      return res.status(500).json({
        error: "Talk creation failed",
        detail: talk,
      });
    }

    // Poll the talk status until the result URL is available or a timeout is reached
    let videoUrl = null;
    for (let i = 0; i < 30; i++) {
      // Wait 2 seconds between polls
      await new Promise((resolve) => setTimeout(resolve, 2000));
      const statusRes = await fetch(`https://api.d-id.com/talks/${talk.id}`, {
        headers: {
          Authorization: `Basic ${Buffer.from(`${apiKey}:`).toString("base64")}`,
        },
      });
      const status = await statusRes.json();
      if (status.result_url) {
        videoUrl = status.result_url;
        break;
      }
      if (status.status === "error") {
        return res.status(500).json(status);
      }
    }

    // If polling timed out without a result, return an error
    if (!videoUrl) {
      return res.status(504).json({
        error: "Video generation timed out",
      });
    }

    // Return the URL of the generated video
    return res.status(200).json({ videoUrl });
  } catch (err) {
    // Catch any unexpected errors and return an error response
    return res.status(500).json({
      error: err.message || "Server error",
    });
  }
}

